/* eslint quotes:0 */
var map = require('lodash.map');
var isBoolean = require('lodash.isboolean');
var forEach = require('lodash.foreach');
var isNumber = require('lodash.isnumber');
var isObject = require('lodash.isobject');
var isArray = require('lodash.isarray');

var sass  = require('node-sass');
var cssColors  = require('css-color-names');

function sassTypeForValue(value) {
  if (isBoolean(value)) {
    return 'boolean';
  } else if (
    isNumber(value)||
    value.indexOf('px') > 0 ||
    value.indexOf('em') > 0
  ) {
    return 'number';
  } else if (value.indexOf('#') === 0) {
    return 'color';
  } else if (shouldQuoteValue(value)) {
    return 'string';
  } else {
    return '';
  }
}

function quote(string, force) {
  if (shouldQuoteValue(string) || force) {
    return "'" + string + "'";
  }
  return string.replace ? string.replace(/^\!/, '') : string;
}

function pad(string, amount) {
  var left = Math.max(amount - string.length, 0);
  return string + (Array(left + 1).join(' '));
}

function getMaxLength(array) {
  var max = 0;
  array.forEach(function(item) {
    if (item.length > max) {
      max = item.length;
    }
  });
  return max;
}

function formatMapItem(paddingAmount, value, key) {
  key = quote(key, true);
  return '  ' + pad(key, paddingAmount) + ': ' + quote(value) + ",\n";
}

function isCSSColor(value) {
  return Object.keys(cssColors).indexOf(value) >= 0;
}

function shouldQuoteValue(value) {
  return !isBoolean(value)
          && !isNumber(value)
          && value.indexOf('px') < 0
          && value.indexOf('em') < 0
          && value.indexOf('#') < 0
          && value.indexOf('!') !== 0
          && !isCSSColor(value);
}

module.exports = function(configuration) {
  var output = "// Don't edit this file, it is automatically generated by the buildConfig build task and the contents of base-config.js :)\n";

  // TODO: if last item type was not the same, add another line break
  forEach(configuration, function(value, key) {
    var itemSass = '$' + key + ': ';
    var padAmount = getMaxLength(Object.keys(value)) + 2;
    var sassType;

    if (isArray(value)) {
      var quotedValues = value.map( v => quote(v) ).join(', ');
      itemSass += "(" + quotedValues + ")";
      sassType = 'list';

    } else if (isObject(value)) {
      itemSass += "(\n" +
        map(value, (v, k) => formatMapItem(padAmount, v, k)).join('')
      + ')';
      sassType = 'map';
    } else {
      itemSass += quote(value);
      sassType = sassTypeForValue(value);
    }

    if (sassType.length) {
      sassType = "\n/// @type " + sassType + "\n";
    }
    output += sassType + itemSass + " !default;\n";
  });

  // Checking if the build is valid SASS
  // TODO: should be async
  sass.renderSync({ data: output });

  return output;
};

