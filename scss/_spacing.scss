////
/// @group spacing
////

/// Generate spacing rules for a specific scale.
/// This will take the value defined for each item in `$spacing-values`, and multiply it by a number. Useful for adjusting spacing at different breakpoints. If either parameter is left empty, spacing for that direction will not be affected (see `rules-for-space-value`).
/// *If `$use-spacing` is true, the output this mixin with the parameters `scale-spacing(1,1)` is included in the default nebula.css output.*
/// @param {Number} $vSpacingScale - Multiplier for the _vertical_ spacing that is generated. Optional.
/// @output
/// ```scss
///   // Assuming, and the example above:
///   $spacing-values: ('medium': 20, 'large': 40);
///
///   @include scale-spacing(1.5, 1);
///   // results in:
///   @include rules-for-space-value('medium', 30, 20);
///   @include rules-for-space-value('large', 60, 40);
///
///   @include scale-spacing(.5);
///   // results in:
///   @include rules-for-space-value('medium', 10, 10);
///   @include rules-for-space-value('large', 20, 20);
/// ```
@mixin scale-spacing($vSpacingScale: null, $hSpacingScale: null) {
  @each $name, $value in $spacing-values {
    @if ($hSpacingScale and $vSpacingScale) {
      @include rules-for-space-value($name, $value * $vSpacingScale, $value * $hSpacingScale);
    } @else if $hSpacingScale {
      @include rules-for-space-value($name, null, $value * $hSpacingScale);
    } @else if $vSpacingScale {
      @include rules-for-space-value($name, $value * $vSpacingScale);
    }
  }
}

@mixin vSpacingProps($prop, $value) {
  @if unitless($value) { $value: $value * 1px; }
  #{$prop}-top: $value;
  #{$prop}-bottom: $value;
}

@mixin hSpacingProps($prop, $value) {
  @if unitless($value) { $value: $value * 1px; }
  #{$prop}-left: $value;
  #{$prop}-right: $value;
}


/// Mixin that prints out multiple CSS classes for managing spacing between and within elements. Depending on values in the `$spacing-directions` list, it will generate additional classes for specific directions. By default this adds spacing classes for the top and bottom.
///
/// @param {String} $name - The size's 'name', will be represented in the classname generated
/// @param {Number} $vvalue - Amount of _vertical_ spacing applied
/// @param {Number} $hvalue - Amount of _horizontal_ spacing applied
/// @see scale-spacing
/// @output
/// ```scss
/// .n-spacing-$name {}  // (margin on all sides)
/// .n-vspacing-$name {} // (vertical margins only)
/// .n-hspacing-$name {} // (horizontal margins)
/// .n-padding-$name {}  // (padding on all sides)
/// .n-vpadding-$name {} // (vertical padding only)
/// .n-hpadding-$name {} // (horizontal padding)
///
/// // For working with items in a grid:
/// .n-frame-$name    {} // (negative margins)
///
/// // Additionally, based on $spacing-directions:
/// .n-spacing-top-$name {}
/// .n-spacing-bottom-$name {}
/// .n-padding-top-$name {}
/// .n-padding-bottom-$name {}
///
/// // If either `$vvalue` or `$hvalue` parameter is left empty,
/// // the mixin wil omit output regarding that direction:
///  @include rules-for-space-value('medium', null, 40);
///  // Outputs:
///  .n-spacing-medium  { margin-left: 40px;  margin-right: 40px; }
///  .n-hspacing-medium { margin-left: 40px;  margin-right: 40px; }
///  .n-padding-medium  { padding-left: 40px; padding-right: 40px; }
///  .n-hpadding-medium { margin-left: 40px;  margin-right: 40px; }
/// ```
@mixin rules-for-space-value($name, $vvalue: null, $hvalue: null) {
  .#{$class-prefix}-spacing-#{$name} {
    @if ($hvalue and $vvalue) { margin: $vvalue * 1px $hvalue * 1px; }
    @else if $hvalue { @include hSpacingProps('margin', $hvalue); }
    @else if $vvalue { @include vSpacingProps('margin', $vvalue); }
  }

  @if $vvalue {
    .#{$class-prefix}-vspacing-#{$name} {
      @include vSpacingProps('margin', $vvalue);
    }
  }

  @if $hvalue {
    .#{$class-prefix}-hspacing-#{$name} {
      @include hSpacingProps('margin', $hvalue);
    }
  }

  .#{$class-prefix}-frame-#{$name} {
    @if ($hvalue and $vvalue) { margin: $vvalue * -1px $hvalue * -1px; }
    @else if $hvalue { @include hSpacingProps('margin', -$hvalue); }
    @else if $vvalue { @include vSpacingProps('margin', -$vvalue); }
  }

  .#{$class-prefix}-padding-#{$name} {
    @if ($hvalue and $vvalue) { padding: $vvalue * 1px $hvalue * 1px; }
    @else if $hvalue { @include hSpacingProps('padding', $hvalue); }
    @else if $vvalue { @include vSpacingProps('padding', $vvalue); }
  }

  @if $vvalue {
    .#{$class-prefix}-vpadding-#{$name} {
      @include vSpacingProps('padding', $vvalue);
    }
  }

  @if $hvalue {
    .#{$class-prefix}-hpadding-#{$name} {
      @include hSpacingProps('padding', $hvalue);
    }
  }


  @each $direction in $spacing-directions {
    $directionValue: null;
    @if (($direction == 'left' or $direction == 'right') and $hvalue) {
      $directionValue: $hvalue;
    } @else if (($direction == 'top' or $direction == 'bottom') and $vvalue) {
      $directionValue: $vvalue;
    }

    @if $directionValue {
      .#{$class-prefix}-spacing-#{$direction}-#{$name} {
        margin-#{$direction}: $directionValue * 1px;
      }

      .#{$class-prefix}-padding-#{$direction}-#{$name} {
        padding-#{$direction}: $directionValue * 1px;
      }
    }
  }
}


@if ($use-spacing) {
  // On initial inclusion we also print the default scale classes.
  @include scale-spacing(1, 1);
}
